// Script para diagnosticar el formato de ticket_id\n// Este script se puede ejecutar en la consola del navegador\n\nasync function diagnosticarFormatoTickets() {\n  try {\n    const { supabase } = await import('@/lib/supabaseClient');\n    \n    console.log('=== DIAGNÓSTICO DE FORMATO DE TICKET_ID ===');\n    \n    // Obtener algunos registros de faltantes\n    console.log('\\n1. Analizando registros de faltantes...');\n    const { data: faltantes, error: faltantesError } = await supabase\n      .from('faltantes')\n      .select('ticket_id, olpn, created_by_user_id')\n      .limit(10);\n    \n    if (faltantesError) {\n      console.error('Error obteniendo faltantes:', faltantesError);\n    } else {\n      console.log(`Encontrados ${faltantes.length} registros de faltantes:`);\n      faltantes.forEach((item, index) => {\n        console.log(`  ${index + 1}. ticket_id: \"${item.ticket_id}\", olpn: \"${item.olpn}\"`);\n      });\n    }\n    \n    // Obtener algunos registros de rechazos\n    console.log('\\n2. Analizando registros de rechazos...');\n    const { data: rechazos, error: rechazosError } = await supabase\n      .from('rechazos')\n      .select('ticket_id, folio')\n      .limit(10);\n    \n    if (rechazosError) {\n      console.error('Error obteniendo rechazos:', rechazosError);\n    } else {\n      console.log(`Encontrados ${rechazos.length} registros de rechazos:`);\n      rechazos.forEach((item, index) => {\n        console.log(`  ${index + 1}. ticket_id: \"${item.ticket_id}\", folio: \"${item.folio}\"`);\n      });\n    }\n    \n    // Verificar el patrón de los ticket_id\n    console.log('\\n3. Analizando patrones de ticket_id...');\n    \n    if (faltantes && faltantes.length > 0) {\n      const faltantesPatterns = faltantes.map(item => {\n        const match = item.ticket_id.match(/^([A-Z]+)(\\d+)$/);\n        return match ? { prefix: match[1], number: match[2] } : null;\n      }).filter(Boolean);\n      \n      console.log('Patrones encontrados en faltantes:');\n      faltantesPatterns.forEach((pattern, index) => {\n        console.log(`  ${index + 1}. Prefix: ${pattern.prefix}, Number: ${pattern.number}`);\n      });\n    }\n    \n    if (rechazos && rechazos.length > 0) {\n      const rechazosPatterns = rechazos.map(item => {\n        const match = item.ticket_id.match(/^([A-Z]+)(\\d+)$/);\n        return match ? { prefix: match[1], number: match[2] } : null;\n      }).filter(Boolean);\n      \n      console.log('Patrones encontrados en rechazos:');\n      rechazosPatterns.forEach((pattern, index) => {\n        console.log(`  ${index + 1}. Prefix: ${pattern.prefix}, Number: ${pattern.number}`);\n      });\n    }\n    \n  } catch (error) {\n    console.error('Error en diagnóstico:', error);\n  }\n}\n\n// Para ejecutar el diagnóstico:\n// diagnosticarFormatoTickets();